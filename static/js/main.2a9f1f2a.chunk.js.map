{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","normal","texto","select","check","estado","value","setValue","handleChange","target","name","type","checked","console","log","length","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAqDeA,EAnDH,WAGV,MAA0BC,mBAAS,CAC/BC,OAAQ,cACRC,MAAO,qBACPC,OAAQ,GACRC,OAAO,EACPC,OAAQ,UALZ,mBAAOC,EAAP,KAAcC,EAAd,KAOMC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBF,EAAS,2BACJD,GADG,kBAGLG,EAAOC,KAAuB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOH,UAKxE,OAFAO,QAAQC,IAAIR,GAGV,gCACGA,EAAMS,OAAS,EAAI,wDAAoC,KACxD,uBAAOJ,KAAK,OAAOD,KAAK,SAASJ,MAAQA,EAAML,OAAQe,SAAUR,IACjE,0BAAUE,KAAK,QAAQM,SAAUR,EAAcF,MAAOA,EAAMJ,QAE5D,yBAAQI,MAAOA,EAAMH,OAAQO,KAAK,SAASM,SAAUR,EAArD,UACE,wBAAQF,MAAM,GAAd,8BACA,wBAAQA,MAAM,eAAd,2BACA,wBAAQA,MAAM,iBAAd,6BACA,wBAAQA,MAAM,gBAAd,8BACA,wBAAQA,MAAM,SAAd,uBAGF,uBACEK,KAAK,WACLD,KAAK,QACLM,SAAUR,EACVI,QAASN,EAAMF,QAGjB,gCACE,4CACA,uBAAOY,SAAUR,EAAcG,KAAK,QAAQL,MAAM,QAAQI,KAAK,SAASE,QAA0B,UAAjBN,EAAMD,SAFzF,SAGE,uBAAOW,SAAUR,EAAcG,KAAK,QAAQL,MAAM,SAASI,KAAK,SAASE,QAA0B,WAAjBN,EAAMD,SAH1F,UAIE,uBAAOW,SAAUR,EAAcG,KAAK,QAAQL,MAAM,SAASI,KAAK,SAASE,QAA0B,WAAjBN,EAAMD,SAJ1F,iBC9BSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2a9f1f2a.chunk.js","sourcesContent":["import { useState } from 'react'\n\nconst App = () => {\n  //utilizamos useState para guardar los valores que modifica e introduce el usuario\n  //al tener que guardar varios valores inicializamos el useState con un objeto con los atributos que corresponden al name de los elementos html\n  const [value, setValue] = useState({\n      normal: 'por defecto',\n      texto: 'introduce un texto',\n      select: '',\n      check: false, \n      estado: 'feliz' \n  })\n  const handleChange = ({ target }) => {//no recibe el evento (e), sino su propiedad mediante un destructuring\n    setValue({ \n      ...value,\n      //interceptamos cuando el input sea de tipo checkbox y en vez de asignar value, vamos a asignar checked\n      [target.name]: target.type === 'checkbox' ? target.checked : target.value\n    })\n  }\n  console.log(value)\n  //se pueden hacer validaciones con ese value\n  return(\n    <div>\n      {value.length < 5 ? <span>longitud minima de 5</span> : null}\n      <input type=\"text\" name=\"normal\" value ={value.normal} onChange={handleChange} />\n      <textarea name=\"texto\" onChange={handleChange} value={value.texto} />\n    \n      <select value={value.select} name=\"select\" onChange={handleChange}>\n        <option value=\"\">-- Seleccione --</option>\n        <option value=\"chanchofeliz\">Chancho feliz</option>\n        <option value=\"chanchitofeliz\">Chanchito feliz</option>\n        <option value=\"chanchotriste\">Chanchito triste</option>\n        <option value=\"felipe\">Felipe</option>\n      </select>\n\n      <input \n        type=\"checkbox\"\n        name=\"check\"\n        onChange={handleChange}\n        checked={value.check}\n      />\n\n      <div>\n        <label>Chancho</label>\n        <input onChange={handleChange} type=\"radio\" value=\"feliz\" name=\"estado\" checked={value.estado === 'feliz'}/> Feliz\n        <input onChange={handleChange} type=\"radio\" value=\"triste\" name=\"estado\" checked={value.estado === 'triste'}/> Triste\n        <input onChange={handleChange} type=\"radio\" value=\"felipe\" name=\"estado\" checked={value.estado === 'felipe'}/> Felipe\n      </div>\n    \n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}